#-*-sh-*-

function current_git_branch() {
    br=`git branch 2>/dev/null | grep '^\*' | cut -c3-`
    if [ "X$br" != "X" ] ; then
	echo "git::${br}"
    else
	echo
    fi
}

# find all perl subs in a file
function subs() { 
    egrep -E '^(sub |__END__)' $1 
}

function psgrep() {
    ps aux | grep "$1"
}

function ff() {
    find . -name "$1"
}

# move up N directories:
function up() { 
    for ((j=${1:-1},i=0;i<j;i++)); do 
	builtin cd ..;
    done;
}

# move up to a named directory (does nothing if dir not found):
function upto() {
    target=$1
    start_dir=$PWD
    
    oldifs="$IFS"
    IFS="/"

    j=0
    for i in $start_dir
    do
	a[$j]=$i
#	$debug " set item $j, ${a[$j]}"
	j=$(( j+1 ))
    done

    yay=0
    IFS="$oldifs"

    for ((i=${#a[@]}-1; i>=0; i--))
    do
#	echo ${a[$i]} = $target \?
	if [ "${a[$i]}" = "$target" ]; then
	    yay=1;
	    break;
	fi
	builtin cd ..;
    done
    unset a			# otherwise it mucks up the next call to upto

    if [ $yay -eq 0 ]; then
#	echo darn
	builtin cd $start_dir
    fi
}

function blah() {
    a=(this that these those)
    for ((i=${#a[@]}-1; i>=0; i--))
    do
        echo a $i ${a[$i]}
    done
}

# mvn-create $groupId $artifactId $version
# mvn-create $groupId $artifactId (version defaults to 0.01)
# mvn-create $artifactId (like above, and groupId defaults to org.sysbiology)
function mvn-create() {
    if [ $# -eq 1 ]; then
	groupId='org.systemsbiology'
        artifactId=$1
        version=0.01
    elif [ $# -eq 2 ]; then
        groupId=$1
	artifactId=$2
        version=0.01
    elif [ $# -eq 3 ]; then
	groupId=$1
	artifactId=$2
	version=$3
    else
        echo usage $0 '[groupId]' '<artifactId>' '[version]'
        return
    fi

    if [ -z $artifactId ]; then
        echo artifactId not set
	return 
    fi

    mvn archetype:generate \
	-DarchetypeGroupId=org.apache.maven.archetypes \
	-DgroupId=$groupId \
	-DartifactId=$artifactId \
        -Dversion=$version
}

# run a jar:
# mvn-run $main_class [$arg1 $arg2 ...]
function mvn-run() {
    mvn exec:java -Dexec.mainClass="$1" -Dexec.args="${@:2}"
}

# Call mvn install:install-file to the local .m2 repo:
function mvn-install() {
    file=$1
    group_id=$2
    artifact_id=$3
    version=$4
    packaging=jar
    mvn install:install-file \
	-Dfile=$file \
	-DgroupId=$group_id \
	-DartifactId=$artifact_id \
	-Dversion=$version \
	-Dpackaging=$packaging \
	-DgeneratePom=true
}

function here() {
    cd `/bin/pwd`
}

function iphost() {
    ifconfig | grep -A1 eth0 | tail -1 | cut -d: -f2 | cut -f1 -d\  
}

function unpack_rpm() {
    rpm2cpio $1 | cpio -idmv
}

# refresh all git repos by pulling from origin/master
function freshen() {
    for i in $GIT_HOME/*; do
        if [ -d $i -a -d $i/.git ]; then
            ( cd $i && git fetch && git pull origin master )
        fi
    done
}

function current_venv() {
    if [ -n "${VIRTUAL_ENV}" ]; then
	basename ${VIRTUAL_ENV}
    else
	echo sys
    fi
}

# switch to a particular venv:
function venv() {
    if [ -n "$1" ]; then
	if [ ! -d ${VENVS_DIR}/$1 ]; then
	   echo no such venv: $1
	   return
	fi
    fi
	 
    if [ -n "$1" ]; then
	source ${VENVS_DIR}/$1/bin/activate
    fi
    set_prompt
}

# create and start a new virtualenv:
function create_venv() {
    if [ -z "$1" ]; then
	echo missing arg: virtual env name
	return
    fi
    force=${2:-}
    echo force: ${force}

    if [ -d ${VENVS_DIR}/${1} ]; then
	if [ "${force}" = "-f" ]; then # dumb way of handling opts
	    rm_venv $1
	else
	    echo virtualenv ${1} already exists
	    return
	fi
    fi
    
    pushd $VENVS_DIR
    virtualenv $*
    venv $1
    my_activate $venv		# this effectively starts the virtual_env

    pip_opts=('--trusted-host' 'devpi.sea0.luminusnetworks.com')
    pip install --upgrade pip
    pip install --trusted-host devpi.sea0.luminusnetworks.com ipython
    pip install --trusted-host devpi.sea0.luminusnetworks.com pbr
    popd
}

function my_activate() {
    # see https://gist.github.com/datagrok/2199506
    # type 'exit' instead of 'deactivate'
    venv=$1
    export VIRTUAL_ENV="${VENVS_DIR}/${venv}"
    export PATH="${VIRTUAL_ENV}/bin:${PATH}"
    # unset PYTHON_HOME

}



function rm_venv() {
    if [ -z "$1" ]; then
	echo missing arg: virtual env name
	return
    fi
    echo removing $1...
    rm -rf "${VENVS_DIR}/$1"
    set_prompt
}

function venvs() {
    ls ${VENVS_DIR}
}

function set_prompt() {
    exit_code=$?
    export PS1="\n\n[\h] {py::$(current_venv)} <\$(current_git_branch)> (${exit_code})\n \w \$ "
}

function rm_stale_dockers() {
    # may warn if an image is in use, but no harm no foul
    docker images | grep '<none>' | cut -c41-52 | xargs docker rmi {}
}

# ssh's:
function saturn() {
    ssh -p 3022 -X victor@127.0.0.1
}
