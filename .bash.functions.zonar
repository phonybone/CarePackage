#-*-sh-*-
# export ZADMIN_DEV=postgresql://postgres:snator9@dev-zadmin.sea-001.zonarsystems.net:5432/zadmin_dev
export GTC_TUNNEL_LOCAL_PORT=5399

export ZAPY_API_KEY_DEV='886b2331-2768-45c7-b2e1-464ad2d3a8e2'
export ZAPY_API_KEY_STAGING='54dd94d1-4564-4d1b-9849-c88bde32e3e8'
export ZAPY_API_KEY_PROD='213946ba-5f44-410d-98bd-aa6f7920d0ad'

export ZPASS_ROOT=${HOME}/zp/APIs/zpass-api

function zapy_api_key {
    # print the zapy-api key for a given $env
    local env=$(echo $1 | tr [:lower:] [:upper:])
    local envvar="ZAPY_API_KEY_${env}"
    local envval=${!envvar}
    echo ${envval} 
}

function php_syntax {
    folder=${1-$PWD}
    find $folder -name '*.php' | xargs -t -L 1 php -l | grep -v 'No syntax error'
}

function findswipes {
    # use cURL to trigger zapy-zpassplus find_swipes
    ACCOUNT='dbr47_rep1023'
    Z_ENV=dev
    curl -X POST -d "account=${ACCOUNT}" "https://zapy-zpassplus.${Z_ENV}.zonarsystems.net/zpassplus/find_swipes"
}

function ldap_pw {
    # extract the ldap_pw from its secret location
    grep -A1 'LDAP password' ${HOME}/Dropbox/Zonar/hr-admin/hr-admin.org | tail -1 | tr -d '[:space:]' | pbcopy
    echo LDAP pw copied to clipboard
}

function sops_rtb_db_uri {
    # extract DATABASE_URI from a sops file
    local sops_file=$1
    local country=${2:-USA}
    if [[ ! -f ${sops_file} ]]; then
       echo "${sops_file}: no such file"
       return 1
    fi
    sops --decrypt ${sops_file} | grep DATABASE_URI_${country} | cut -f2- -d\: | sed s/3306/5436/
}

function set_rtb {
    # find a rtb_db uri by decrypting the given sops file, then use it to connect to db
    # assumes gcp_sql proxy is already running
    local envn=$1
    if [ -e $envn ]; then
	export PSQL_URI_ENV=file
	export PSQL_URI=$1
	echo ${PSQL_URI} | pbcopy
	return
    fi
    
    if [ $envn == 'local' ]; then
	export PSQL_URI_ENV=local
	export PSQL_URI='postgresql://localhost/route_board'
	echo ${PSQL_URI} | pbcopy
	echo ${PSQL_URI}
	return
    fi

    local sops_file=${HOME}/zp/APIs/routeboard-api/deploy/${envn}/routeboard-api-env.secret.sops.yml
    if [[ ! -e $sops_file ]]; then
	echo $sops_file: no such file...
	unset PSQL_URI
	unset PSQL_URI_ENV
	return 1
    fi
    local db_uri=$(sops_rtb_db_uri ${sops_file} | tr -d ' ')
    echo db_uri: ${db_uri}
    export PSQL_URI_ENV=$envn
    export PSQL_URI=${db_uri}
    echo ${db_uri} | pbcopy
}

function rtb_db_test {
    export PSQL_URI=postgresql://postgres:postgres@localhost:3306/route_board
    echo $PSQL_URI
    psql $PSQL_URI
}

function rtb_db_dev {
    set_rtb development
    psql ${PSQL_URI}
}

function rtb_db_staging {
    set_rtb staging
    psql ${PSQL_URI}
}

function rtb_db_prod {
    set_rtb production
    psql ${PSQL_URI}
}

    

function sops_mp_db_uri {
    # connect to MP db via cloud_sql_proxy (call gcp_sql_<env> first in different window)
    local envn=$1
    if [[ ${envn} == 'local' ]]; then
	echo master_plan
	return
    fi
    local sops_file=${HOME}/zp/Services/pupil-ingestion-service/deploy/${envn}/cloudsql-db-credentials.secret.sops.yml
    if [[ ! -f ${sops_file} ]]; then
	echo ${sops_file}: no such file
	return 1
    fi
    local username=$(sops --decrypt ${sops_file} | grep username: | cut -f2 -d\: | tr -d ' ')
    local password=$(sops --decrypt ${sops_file} | grep password: | cut -f2 -d\: | tr -d ' ')
    local psql_uri=postgresql://${username}:${password}@localhost:5436/master_plan
    export PSQL_URI=$psql_uri

    echo $psql_uri
}

function mp_db {
    local env=$1
    local psql_uri=$(sops_mp_db_uri $env)
    psql $psql_uri
}

function mp_db_dev {
    mp_db development
}

function mp_db_staging {
    mp_db staging
}

function mp_db_prod {
    mp_db production
}

function zpass_db {
    # "root" function for connecting to zpass-db
    # requires zpass_sql (GCP SQL proxy) to be running on port 5437
    # exports PSQL_URI as extracted from zpass-api-env according to $env
    local env=$1
    if [[ -z ${ZPASS_ROOT} ]] ; then
	echo ZPASS_ROOT not set
	return 1
    fi
    local country=${2-US}
    sops_file=${ZPASS_ROOT}/deploy/${env}/zpass-api-env.secret.sops.yml
    if [[ ! -e ${sops_file} ]]; then
	echo ${sops_file}: no such file
	return 1
    fi

    local psql_uri=$(sops -d $sops_file | grep "${country}_DATABASE_URI" | cut -f2- -d: | sed 's/3306/5437/')
    
    if [[ -z $psql_uri ]]; then
	echo failed to extract psql uri from $sops_file
	return 1
    fi
    export PSQL_URI=${psql_uri}
    echo using $PSQL_URI
    psql ${PSQL_URI}
}

function zpass_db_dev {
    zpass_db development
}

function zpass_db_staging {
    zpass_db staging
}



function make_postgresql {
    # construct a postgres url
    local dbuser=$1
    local dbpasswd=$2
    local server=$3
    local port=$4
    local dbname=$5
    echo "postgresql://${dbuser}:${dbpasswd}@${server}:${port}/${dbname}"
}

function make_postico {
    local dbuser=$1
    local dbpasswd=$2
    local server=$3
    local port=$4
    local dbname=$5

    cat <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
        <key>database</key>
        <string>$dbname</string>
        <key>host</key>
        <string>$server</string>
        <key>nickname</key>
        <string>$server $dbname</string>
        <key>password</key>
        <string>$dbpasswd</string>
        <key>port</key>
        <integer>$port</integer>
        <key>type</key>
        <string>at.eggerapps.PG-Commander.favorite</string>
        <key>user</key>
        <string>$dbuser</string>
</dict>
</plist>
EOF

}

function zing_dev {
    export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/.ssh/zing-imports.sa.json
    gcloud config set project ${ZING_PROJECT_ID_DEV}
    gcloud compute ssh ${ZING_POD_DEV}    
}

function zing_prod {
    # ssh into Zing imports prod VM:
    gcloud config set project ${ZING_PROJECT_ID_PROD}
    echo ${ZING_PWD} | pbcopy
    gcloud compute ssh ${ZING_POD_PROD}    
    # vars defined in .bashrc.local.zonar

    # this don't work; tries to log in to an sFTP-only server
    # echo $ZING_PWD | pbcopy
    # ssh ${ZING_USER}@${ZING_HOST}
}

function zing_logs {
    # get GCP logs for the Zing Imports prod VM:
    # Note: values subject to change (eg zing-import-zing-prod-na-667t
    # Original command came from GCP console for VM, logs (see note at bottom of log page)
    gcloud compute --project=zing-imports-app-prod-na-b7f1 instances get-serial-port-output zing-import-zing-prod-na-667t --zone=us-west1-b --port=1
}

function update_sops {
    local folders=("development" "staging" "production")
    for folder in "$folders[@]"; do
	sops_recrypt $folder/env_prepare.sops.yml
    done
    git add .
    git commit -m "$(current_git_branch): updating sops"
}

########################################################################
# git helpers
function git-co-master {
    git switch master
    echo pulling from origin master...
    git pull origin master
    if [[ ! -d "deploy" ]]; then
	echo no deploy/
	git switch -
	return 0
    fi

    local files=$(find deploy -name '*.sops.yml')
    desopsify sops ${files}

    git switch -
}

function desopsify {
    # decrypt a list of sops files and write the results to disk, remove '.sops' from the input filename
    # WIP
    local files=$@

    for fn in $files; do
	local base=$(basename $fn)
	local folder=$(dirname $fn)
	local newpath=$(rm_elem "$base" .sops)
	sops -d "${fn}" >${newpath}
	echo ${fn}
    done
}

function git-tag-release {
    local version=$1
    if [[ -z "$version" ]] ; then
	>&2 echo "usage: git-tag-release <version>"
	return 1
    fi
    git checkout master
    git pull origin master
    git tag -a "$version" -m "Version ${version}"
    git push origin --tags
}

function pup_jumpbox_dev {
    gcloud container clusters get-credentials zonar-working-na-2 --zone us-west1 --project zonar-working-na-e22c
    kubectl exec -it -n cassandra-tools-dev `kubectl get po -n cassandra-tools-dev -o custom-columns=:metadata.name` -- bash
}
