# -*-sh-*-
# Bash functions relating to Kubernetes
# see also https://kubernetes.io/docs/reference/kubectl/cheatsheet/

# setup tab completion (I think)
complete -F __start_kubectl k8

function get_pod {
    # get pods matching regex in $1
    local podname=$1
    local ns=$2
    kubectl get pods -n "${ns}" | grep "${podname}" | grep Running | cut -f1 -d\ | pbcopy
    pbpaste
}

function login_pod {
    # this only works if bash is installed on the pod
    local podname=$1
    local ns=$2
    pod=$(get_pod $podname $ns)
    if [ -z "$pod" ]; then
	echo No pods found
	return 1
    fi
    kubectl exec -it -n $ns $pod -- /bin/bash
}

function pod_logs {
    # usage: pod_logs <podname> <ns>
    local podname=$1
    local ns=$2
    pod=$(get_pod $podname $ns)
    if [[ -z ${pod} ]]; then
	echo no pod found for ${podname}
	return 1
    fi
    echo kubectl logs -n $ns $pod # "$@"
    kubectl logs -n $ns $pod "$3" | grep -v version
}

function pod_logsf {
    # usage: pod_logs <podname> <ns>
    local podname=$1
    local ns=$2
    pod=$(get_pod $podname $ns)
    if [[ -z ${pod} ]]; then
	echo no pod found for ${podname}
	return 1
    fi
    kubectl logs -f -n $ns $pod "$3"
}

function grep_pod_logs {
    local WHAT=$1
    local NS=${2:-pupil-prod}
    local SERVICE=${3:-zpp-api}

    if [[ "${WHAT}" == "--help" ]]; then
	echo 'usage: grep_pod_logs <what> <ns> <service>' >&2
	return
    fi

    for pod in $(kubectl get pods -n ${NS} | grep ${SERVICE} | grep Running | cut -f 1 -d ' '); do 
	echo --------------------------- 
	echo $pod
	echo --------------------------- 
	kubectl logs ${pod} -c ${SERVICE} -n ${NS} | grep ${WHAT}
    done
}

function connect_project {
    # this maybe should be named 'connect_cluster'
    local project="${1:=$(gcloud config get-value project)}"
    gcloud container clusters get-credentials vpc-native-working-1-kube-zonar --zone us-west1-a --project $project
}

function connect_working_na2 {
    gcloud container clusters get-credentials zonar-working-na-2 --region us-west1 --project zonar-working-na-e22c
}

function k8-all-ns {
    # list all namespaces via pods; can also just `k8 get namespaces`
    kubectl get pods --all-namespaces | cut -c1-48 | uniq
}

function k8-set-ns {
    # set the namespace param for future commands:
    local cc=$(kubectl config current-context)
    kubectl config set-context ${cc} --namespace="$1"
}

function helm-reset {
    local deployment=$1
    if [ -z "$deployment" ]; then
	echo usage: helm-reset \<deployment\>
	return
    fi
    helm delete --purge ${deployment}
}
