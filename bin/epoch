#!/usr/bin/env python
# -*- coding: utf-8 -*-

'''
Utility to convert seconds from the epoch to something human-readable.

Author: Victor Cassen
'''

import sys
import os
from time import localtime, asctime, time, strptime, mktime

pb_dir = os.path.expanduser("~/Dropbox/sandbox/python/phonybone_utils")
sys.path.append(pb_dir)

from pbutils.times import duration, ep2asc
from pbutils.streams import warn
from pbutils.argparsers import parser_stub, wrap_main


formats = [
    '%Y-%m-%d',
    '%Y/%m/%d',
    '%Y %m %d',

    '%y-%m-%d',
    '%y/%m/%d',
    '%y %m %d',

    '%m-%d-%Y',
    '%m/%d/%Y',
    '%m %d %Y',

    '%m-%d-%y',
    '%m/%d/%y',
    '%m %d %y',

    '%Y-%m-%d %H:%M:%S',
    '%Y/%m/%d %H:%M:%S',
    '%Y %m %d %H:%M:%S',

    '%y-%m-%d %H:%M:%S',
    '%y/%m/%d %H:%M:%S',
    '%y %m %d %H:%M:%S',

    '%m-%d-%Y %H:%M:%S',
    '%m/%d/%Y %H:%M:%S',
    '%m %d %Y %H:%M:%S',

    '%m-%d-%y %H:%M:%S',
    '%m/%d/%y %H:%M:%S',
    '%m %d %y %H:%M:%S',
]

def main(opts):
    if opts.dur:
        warn(F"{opts.dur}: {duration(opts.dur)}")
        return 0

    if not opts.arg:
        arg = time()
    else:
        arg = opts.arg[0]
        if arg == '-':
            arg = sys.stdin.readline().strip()
        
    try:
        farg = float(arg)
    except (ValueError, TypeError):
        pass
    else:
        farg += get_offset(opts)
        if opts.epoch:
            fmt = f"{{farg:.{opts.precision}f}}"
            print(fmt.format(farg=farg))

        else:
            print(ep2asc(farg, fmt=opts.fmt))
        return 0

    # custom format?
    if opts.fmt:
        try:
            print(int(mktime(strptime(arg, opts.fmt))))
            return 0
        except ValueError:
            print(f"Can't use {opts.fmt} to format {arg}", file=sys.stdout)
            return 1

    # default format?
    for fmt in formats:
        try:
            print(int(mktime(strptime(arg, fmt))))
            return 0
        except ValueError:
            pass
        
    print(f"Don't know what to do with '{arg}'")
    return 1
        

def get_offset(opts):
    secs = 1
    mins = secs * 60
    hours = mins * 60
    days = hours * 24
    years = days * 365

    offset = 0
    if opts.S:
        offset += opts.S
    if opts.M:
        offset += opts.M * mins
    if opts.H:
        offset += opts.H * hours
    if opts.D:
        offset += opts.D * days
    if opts.Y:
        offset += opts.Y * years
    if 'DEBUG' in os.environ:
        warn(f"offset={offset}")
    return offset

def make_parser():
    parser = parser_stub(__doc__)
    parser.add_argument('--fmt', help='interpret argv using custom format')

    parser.add_argument('-Y', help='year offset', type=float)
    parser.add_argument('-D', help='day offset', type=float)
    parser.add_argument('-H', help='hour offset', type=float)
    parser.add_argument('-M', help='minute offset', type=float)
    parser.add_argument('-S', help='second offset', type=float)

    parser.add_argument('-e', '--epoch', help='output in epoch-seconds', action='store_true')
    parser.add_argument('--dur', type=int, help='interpret arg as a duration')
    parser.add_argument('-p', '--precision', type=positive_int, default=0, help='with -e (--epoch): decimal precision of output')
    parser.add_argument('arg', nargs='*')

    return parser


def positive_int(x):
    try:
        x = int(x)
        if x < 0:
            raise ValueError(x)
    except (TypeError, ValueError):
        raise argparse.ArgumentTypeError(F"{x}: not a positive integer")
    return x


if __name__ == '__main__':
    parser = make_parser()
    wrap_main(main, parser)
