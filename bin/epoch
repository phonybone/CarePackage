#!/usr/bin/env python
# -*- coding: utf-8 -*-

'''
Utility to convert seconds from the epoch to something human-readable.

Author: Victor Cassen
'''

import sys
import os
from time import localtime, asctime, time, strptime, mktime

formats = [
    '%Y-%m-%d',
    '%Y/%m/%d',
    '%Y %m %d',

    '%y-%m-%d',
    '%y/%m/%d',
    '%y %m %d',

    '%m-%d-%Y',
    '%m/%d/%Y',
    '%m %d %Y',

    '%m-%d-%y',
    '%m/%d/%y',
    '%m %d %y',
]

def main(opts):
    if not opts.arg:
        arg = time()
    else:
        arg = opts.arg[0]

    try:
        farg = float(arg)
    except (ValueError, TypeError):
        pass
    else:
        offset = get_offset(opts)
        print(ep2asc(farg + offset))
        return 0

    # custom format?
    if opts.fmt:
        try:
            print(mktime(strptime(arg, opts.fmt)))
            return 0
        except ValueError:
            print(f"Can't use {opts.fmt} to format {arg}", file=sys.stdout)
            return 1

    # default format?
    for fmt in formats:
        try:
            print(mktime(strptime(arg, fmt)))
            return 0
        except ValueError:
            pass
        
    print(f"Don't know what to do with '{arg}'")
    return 1
        
def ep2asc(seconds):
    '''
    Return a human readable version of seconds since the epoch.  If not (bool)seconds, use current time.
    '''
    if bool(seconds):
        s = localtime(int(seconds))
    else:
        s = localtime()
    return asctime(s)


def get_offset(opts):
    secs = 1
    mins = secs * 60
    hours = mins * 60
    days = hours * 24
    years = days * 365

    offset = 0
    if opts.S:
        offset += opts.S
    if opts.M:
        offset += opts.M * mins
    if opts.H:
        offset += opts.H * hours
    if opts.D:
        offset += opts.D * days
    if opts.Y:
        offset += opts.Y * years
    return offset

def getopts():
    import argparse
    from argparse import RawTextHelpFormatter # Note: this applies to all options, might not always be what we want...
    parser = argparse.ArgumentParser(description=__doc__, formatter_class=RawTextHelpFormatter)
    parser.add_argument('--fmt', help='interpret argv using custom format')

    parser.add_argument('-Y', help='year offset', type=float)
    parser.add_argument('-D', help='day offset', type=float)
    parser.add_argument('-H', help='hour offset', type=float)
    parser.add_argument('-M', help='minute offset', type=float)
    parser.add_argument('-S', help='second offset', type=float)

    parser.add_argument('arg', nargs='*')
    parser.add_argument('-v', action='store_true', help='verbose')
    parser.add_argument('-d', action='store_true', help='debugging flag')
    # parser.add_argument('args', nargs=argparse.REMAINDER)

    opts = parser.parse_args()
    if opts.d:
        os.environ['DEBUG'] = 'True'
        print(opts)
    return opts


if __name__ == '__main__':
    opts = getopts()
    try:
        rc = main(opts)
        if rc is None:
            rc = 0
        sys.exit(rc)
    except Exception as e:
        if opts.d:
            import traceback
            traceback.print_exc()
        else:
            print('error: {} {}'.format(type(e), e))
        sys.exit(1)
