#-*-sh-*-

# create and start a new virtualenv:
# depends on existance of $PYTHON2 and $PYTHON3, set in .bashrc.local
# Can't just use `which python2`, because that could be set by virtual env
export PYTHON2=/usr/local/bin/python2.7
export PYTHON3=/usr/local/bin/python3.6
export DEFAULT_VENV=vpy3
export VIRTUAL_ENV_DISABLE_PROMPT=1
export VENVS_DIR=${HOME}/.virtualenvs
export SYS_IPYTHON=/Library/Frameworks/Python.framework/Versions/2.7/bin/ipython

function create_venv() {
    venv_name=$1
    if [ -z "$venv_name" ]; then
	echo missing arg: virtual env name
	return
    fi

    python_exe=$PYTHON3		# no one uses v2 anymore
    # py_vers=${2-py3}
    # case ${py_vers} in
    # 	py2)
    # 	    python_exe=$PYTHON2
    # 	    ;;
    # 	py3)
    # 	    python_exe=$PYTHON3
    # 	    ;;
    # 	*)
    # 	    echo unknown python: $py_vers
    # 	    return
    # 	    ;;
    # esac
    

    if [ -d ${VENVS_DIR}/${venv_name} ]; then
	echo virtualenv ${venv_name} already exists
	return
    fi
    

    pushd $VENVS_DIR
    virtualenv --python=${python_exe} ${venv_name}
    venv ${venv_name}	     # see above
    my_activate $venv_name   # this effectively starts the virtual_env

    pip install --upgrade pip
    pip install --upgrade wheel
    pip install --upgrade ipython
    pip install --upgrade pbr
    popd

    if [ ! -z "$2" ]; then	# create a symlink?
	if [ -e "$2" ]; then
	    echo not creating symlink  using $2: already exists
	else
	    ln -s ${VENVS_DIR}/${venv_name} "$2"
	    echo created symlink $2
	fi
    fi
}

function current_venv() {
    if [ -n "${VIRTUAL_ENV}" ]; then
	basename ${VIRTUAL_ENV}
    else
	echo sys
    fi
}

# switch to a particular venv:
function venv() {
    if [ -n "$1" ]; then
	if [ ! -d ${VENVS_DIR}/$1 ]; then
	   echo no such venv: $1
	   return
	fi
    fi
	 
    if [ -n "$1" ]; then
	source ${VENVS_DIR}/$1/bin/activate
    fi
    set_prompt
}

function my_activate() {
    # see https://gist.github.com/datagrok/2199506
    # type 'exit' instead of 'deactivate'
    venv=$1
    export VIRTUAL_ENV="${VENVS_DIR}/${venv}"
    export PATH="${VIRTUAL_ENV}/bin:${PATH}"
    # unset PYTHON_HOME

}



function rm_venv() {
    if [ -z "$1" ]; then
	echo missing arg: virtual env name
	return
    fi
    echo removing $1...
    rm -rf "${VENVS_DIR}/$1"
    set_prompt
    # doesn't handle any symlinks that might have been created using create_venv
}

function venvs() {
    ls ${VENVS_DIR}
}

function sandbox() {
    cd ~/Dropbox/sandbox/python
    venv sandbox
}

function ytoj() {
    # convert yaml (as read from stdin) to json
    # see https://gist.github.com/mboersma/1329669
    python -c 'import sys, yaml, json; y=yaml.safe_load(sys.stdin.read()); print(json.dumps(y, indent=4))'
}

function pyroot {
    start=${1:-.}
    pushd $start >/dev/null
    while [ -f __init__.py ]; do
	cd ..
    done
    echo $PWD
    popd >/dev/null
}

function pylint-to-emacs {
    PYLINT=$(which pylint)
    ROOT=${1-.}

    # echo ${PYLINT} ${ROOT} \| ${HOME}/bin/pylint-to-emacs.py -d ${ROOT}
    pushd ${ROOT} >/dev/null
    ${PYLINT} ${ROOT} | ${HOME}/bin/pylint-to-emacs.py ${ROOT}
    popd >/dev/null
}


function cd-package-root {
    while [[ -e ./__init__.py ]] ; do
	cd ..
    done
}

