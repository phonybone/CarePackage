#-*-sh-*-
export PUPIL_DEV_ID=rtb-dev-167405
export PUPIL_PROD_ID=pupil-prod
echo gcp

export GCP_SQL_PROXY=${HOME}/gsutil/google-cloud-sdk/bin/cloud_sql_proxy


function gcp_sql {
    # start the GCP SQL proxy
    local project=$1
    local database=$2
    local creds=${HOME}/.ssh/${3}
    if [[ ! -f ${creds} ]]; then
	echo ${creds}: no such file
	return 1
    fi
    local port=${4:-5436}


    # local GCP_SQL_PROXY=${HOME}/gsutil/google-cloud-sdk/bin/cloud_sql_proxy

    echo ${GCP_SQL_PROXY} --instances=${project}:us-west1:${database}=tcp:${port} 

    ${GCP_SQL_PROXY} \
    --instances=${project}:us-west1:${database}=tcp:${port} \
    --credential_file=${creds}
}

function gcp_sql_test {
    # start the GCP SQL proxy using hard-coded params:
    local project=rtb-dev-167405
    local database=terraform-pupil-db-test
    local creds=pupil-dev-owner-qa-sa.json
    local port=3306
    gcp_sql ${project} ${database} ${creds} ${port}
}

function gcp_sql_dev {
    # start the GCP SQL proxy using hard-coded params:
    local project=rtb-dev-167405
    local database=terraform-pupil-db-dev
    local creds=pupil-dev-owner-qa-sa.json
    gcp_sql ${project} ${database} ${creds}
}

function gcp_sql_qa {
    # start the GCP SQL proxy using hard-coded params:
    local project=rtb-dev-167405
    local database=terraform-pupil-db-qa
    local creds=pupil-dev-owner-qa-sa.json
    gcp_sql ${project} ${database} ${creds}
}

function gcp_sql_prod {
    # start the GCP SQL proxy using hard-coded params:
    local project=pupil-prod
    local database=terraform-pupil-db-prod
    local creds=pupil-dev-owner-prod-sa.json
    gcp_sql ${project} ${database} ${creds}
}

function gcp_sql_rtb_dev {
    # start the GCP SQL proxy using hard-coded params:
    db=dev
    project=pupil-dev
    database=route_board
    port=5436
    creds=${HOME}/.ssh/pupil-dev-owner-qa-sa.json

    ${GCP_SQL_PROXY} \
    --instances=${project}:us-west1:${database}=tcp:${port} \
    --credential_file=$creds
}

function gcp_sql_rtb_prod {
    # start the GCP SQL proxy using hard-coded params:
    db=prod
    # GCP_SQL_PROXY=${HOME}/gsutil/google-cloud-sdk/bin/cloud_sql_proxy
    project=pupil-prod
    database=route_board
    port=5436
    creds=${HOME}/.ssh/pupil-dev-owner-prod-sa.json

    ${GCP_SQL_PROXY} \
    --instances=${project}:us-west1:${database}=tcp:${port} \
    --credential_file=$creds
}


function zpass_sql {
    local env=$1
    local project=rtb-dev-167405
    local db=pupil-zpass-$env
    local port=5437
    local creds=pupil-dev-owner-qa-sa.json

    gcp_sql $project $db $creds $port
}

function sops_encrypt {
    # this function depends on having the gcp_key available from pbpaste.
    # If you are re-encrypting a file (that you already decrypted), the
    # name of the resource can be found in the encrypted file as plaintext.
    # Otherwise, go to GCP->Security->Cryptographic keys, choose the right
    # project (eg zonar-working), find the name of the project you're working
    # on (eg pupil-route-board), got to far-right vertical '...' menu, click
    # on 'Copy Resource ID', and then manually edit away the 'cryptoKeyVersions/<version'
    # bit at the end (ugh).
    local gcp_key=$(pbpaste)
    echo encrypting using ${gcp_key}
    local src=$1
    local dst=$(insert_elem $1 sops)	# insert_elem defined in ~victor/bin/insert_elem

    local tmpfile=$(mktemp)

    local OLD_CREDS=$GOOGLE_APPLICATION_CREDENTIALS
    unset GOOGLE_APPLICATION_CREDENTIALS

    sops --encrypt --gcp-kms ${gcp_key} $src >$tmpfile
    local ok=$?

    if [[ -n "$OLD_CREDS" ]]; then
	export GOOGLE_APPLICATION_CREDENTIALS=$OLD_CREDS
    fi
    
    if [[ "$ok" != 0 ]]; then
	echo unable to encrypt $src, aborting
	return 1
    fi

    mv $tmpfile $dst
    echo $dst written
}


function sops_extract_resource_id {
    # try the json version first
    local rid=$(cat $1 | jq -e '.sops | .gcp_kms | .[0] | .resource_id' 2>/dev/null | tr -d \")
    if [[ ! -z "${rid}" ]]; then
    	echo $rid
    	return 0
    fi

    #  yaml vesion (calls ytoj (an npm package)):
    rid=$(cat $1 | ytoj 2>/dev/null | jq '.sops | .gcp_kms | .[0] | .resource_id' | tr -d \" 2>/dev/null)
    if [[ ! -z "${rid}" ]]; then
    	echo $rid
    	return 0
    fi
    echo extraction failed
    return 1

}

function join_by { local IFS="$1"; shift; echo "$*"; }

function sops_recrypt {
    # $src should be a sops-encrypted file with '.sops' as the second to last extenstion
    local tgt=$1
    sops_extract_resource_id ${tgt} | pbcopy
    local parts=$(echo $tgt | sed 's/\./ /g')
    local src=$(join_by \. "${parts[@]/sops}")
    if [[ ! -e ${src} ]]; then
       echo ${src}: no such file
       return 1
    fi
    sops_encrypt ${src}
}

function sops_recrypt_and_commit {
    extra_msg=${1:- }
    folders=(environments deploy)
    for secrets in $(find ${folders[@]}  -name '*.sops.yml' 2>/dev/null); do
	sops_recrypt $secrets
	git add $secrets
    done

    git commit -m "$(current_git_branch): updating sops secrets ${extra_msg}"
    git status
}

function use_project {
    env=$1
    case $env in
	dev|qa|stag)
	    proj=rtb-dev-167405
	    ;;
	prod)
	    proj=pupil-prod
	    ;;
	*)
	    echo bad 'env': $env
	    return 1
	    ;;
    esac
    gcloud config set project $proj
    gcloud config list
}


function get_project {
    gcloud config get-value project
}
