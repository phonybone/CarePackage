#-*-sh-*-
function pylint_tests() {
	 explore -f tests | grep '\.py$' | xargs pylint --rcfile pylintrc | l
}

function dpsql {
    # connect to psql that is running under docker
    # see https://medium.com/@lvthillo/connect-from-local-machine-to-postgresql-docker-container-f785f00461a7
    usage="usage: dpsql <container_regex> <db>"
    if [[ -z $1 || -z $2 ]]; then
	echo $usage
	return
    fi
    container_id=$(docker ps | grep $1 | perl -ane 'print $F[0]')
    echo $container_id

    docker exec -it $container_id psql -U postgres -d $2
}


function gcp_sql {
    # start the GCP SQL proxy using hard-coded params:
    db=$1
    gcp_sql_proxy=${HOME}/google-cloud-sdk/bin/cloud_sql_proxy
    project=rtb-dev-167405
    database=terraform-pupil-database-${db}
    port=5436
    creds=${HOME}/.ssh/pupil-dev-owner-qa-sa.json

    echo psql -h localhost -p 5436 -U master_plan_user master_plan
    echo or \'tbt-mp-db\'
    
    ${gcp_sql_proxy} \
    --instances=${project}:us-west1:${database}=tcp:${port} \
    --credential_file=$creds
}


function gcp_sql_dev {
    gcp_sql dev
}

function gcp_sql_qa {
    gcp_sql_dev qa
}

function gcp_sql_prod {
    # start the GCP SQL proxy using hard-coded params:
    db=prod
    gcp_sql_proxy=${HOME}/google-cloud-sdk/bin/cloud_sql_proxy
    project=pupil-prod
    database=terraform-pupil-database-${db}
    port=5436
    creds=${HOME}/.ssh/pupil-dev-owner-${db}-sa.json

    echo psql -h localhost -p 5436 -U master_plan_user master_plan
    echo or \'tbt-mp-db\'

    ${gcp_sql_proxy} \
    --instances=${project}:us-west1:${database}=tcp:${port} \
    --credential_file=$creds
}

function sops_encrypt {
    # this function depends on having the gcp_key available from pbpaste
    gcp_key=$(pbpaste)
    echo encrypting using ${gcp_key}
    src=$1
    dst=$(insert_elem $1 sops)	# insert_elem defined in ~victor/bin/insert_elem

    tmpfile=$(mktemp)

    OLD_CREDS=$GOOGLE_APPLICATION_CREDENTIALS
    unset GOOGLE_APPLICATION_CREDENTIALS

    sops --encrypt --gcp-kms ${gcp_key} $src >$tmpfile
    ok=$?

    if [[ -n "$OLD_CREDS" ]]; then
	export GOOGLE_APPLICATION_CREDENTIALS=$OLD_CREDS
    fi
    
    if [[ "$ok" != 0 ]]; then
	echo unable to encrypt $src, aborting
	return 1
    fi

    mv $tmpfile $dst
    echo $dst written
}


# ssh into various rtb servers:
function rtb-server {
    envrn=${1:-dev}
    app=${2:-etl}		# one of db, etl, or app
    user=${3:-vcassen}
    server="${envrn}-rtb-${app}-001.sea-001.zonarsystems.net"
    echo \(LDAP password\)
    ssh "${user}@${server}"
}

function dev-server {
    echo LDAP password:
    ssh vcassen@dev-app-001.sea-001.zonarsystems.net
}

function get_pod {
    podname=$1
    ns=$2
    kubectl get pods -n $2 | grep $podname | cut -f1 -d\ 
}

function login_pod {
    podname=$1
    ns=$2
    pod=$(get_pod $podname $ns)
    if [ -z "$pod" ]; then
	echo No pods found
	return 1
    fi
    kubectl exec -it -n $ns $pod -- /bin/bash
}

function pod_logs {
    podname=$1
    ns=$2
    pod=$(get_pod $podname $ns)
    kubectl logs -n $ns $pod -f
}

function connect_project {
    # this maybe should be named 'connect_cluster'
    project=${1-zonar-working}
    gcloud container clusters get-credentials vpc-native-working-1-kube-zonar --zone us-west1-a --project $project
}


function php_syntax {
    folder=${1-$PWD}
    find $folder -name '*.php' | xargs -t -L 1 php -l | grep -v 'No syntax error'
}

function gtc_dev {
    echo LDAP password:
    echo account: dbr47_rep1023
    session_name=$1
    if [[ ! -z "${session_name}" ]]; then
	cmd="tmux a -t ${session_name}"
    else
	cmd=''
    fi
    ssh -t vcassen@dev-gtc-web-003.sea-001.zonarsystems.net "${cmd}"
}    
